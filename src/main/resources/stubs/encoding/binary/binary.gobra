// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in https://golang.org/LICENSE

// Signatures for the public declarations in file
// https://github.com/golang/go/blob/master/src/encoding/binary/binary.gobra

package binary

// A ByteOrder specifies how to convert byte sequences into
// 16-, 32-, or 64-bit unsigned integers.
type ByteOrder interface {
	requires acc(&b[0], _) && acc(&b[1], _)
	pure Uint16(b []byte) uint16

	requires acc(&b[0], _) && acc(&b[1], _) && acc(&b[2], _) && acc(&b[3], _)
	pure Uint32(b []byte) uint32

	requires acc(&b[0], _) && acc(&b[1], _) && acc(&b[2], _) && acc(&b[3], _)
	requires acc(&b[4], _) && acc(&b[5], _) && acc(&b[6], _) && acc(&b[7], _)
	pure Uint64(b []byte) uint64

	requires acc(&b[0]) && acc(&b[1])
	ensures acc(&b[0]) && acc(&b[1])
	PutUint16(b []byte, uint16)

	requires acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
	ensures acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
	PutUint32(b []byte, uint32)

	requires acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
	requires acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
	ensures acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
	ensures acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
	PutUint64(b []byte, uint64)

	String() string
}

// (joao): Original implementation of BigEndian and LittleEndian. Changed due to lack of support
// for global vars:
// var LittleEndian littleEndian
// var BigEndian bigEndian
// type littleEndian struct{}
// type bigEndian struct{}

type LittleEndian struct {
	// TODO: remove field
	x int // temporary solution to side-step problems with the encoding of interfaces with fields of finite cardinality
}
type BigEndian struct {
	// TODO: remove field
	x int // temporary solution to side-step problems with the encoding of interfaces with fields of finite cardinality
}

(LittleEndian) implements ByteOrder {
	pure (e LittleEndian) Uint16(b []byte) uint16 {
		return e.Uint16(b)
	}

	pure (e LittleEndian) Uint32(b []byte) uint32 {
		return e.Uint32(b)
	}

	pure (e LittleEndian) Uint64(b []byte) uint64 {
		return e.Uint64(b)
	}

	(e LittleEndian) PutUint16(b []byte, v uint16) {
		e.PutUint16(b, v)
	}

	(e LittleEndian) PutUint32(b []byte, v uint32) {
		e.PutUint32(b, v)
	}

	(e LittleEndian) PutUint64(b []byte, v uint64) {
		e.PutUint64(b, v)
	}
}

(BigEndian) implements ByteOrder {
	pure (e BigEndian) Uint16(b []byte) uint16 {
		return e.Uint16(b)
	}

	pure (e BigEndian) Uint32(b []byte) uint32 {
		return e.Uint32(b)
	}

	pure (e BigEndian) Uint64(b []byte) uint64 {
		return e.Uint64(b)
	}

	(e BigEndian) PutUint16(b []byte, v uint16) {
		e.PutUint16(b, v)
	}

	(e BigEndian) PutUint32(b []byte, v uint32) {
		e.PutUint32(b, v)
	}

	(e BigEndian) PutUint64(b []byte, v uint64) {
		e.PutUint64(b, v)
	}
}

requires acc(&b[0], _) && acc(&b[1], _)
pure func (e LittleEndian) Uint16(b []byte) uint16 /*{
	return uint16(b[0]) | uint16(b[1])<<8
}*/


requires acc(&b[0]) && acc(&b[1])
ensures acc(&b[0]) && acc(&b[1])
func (e LittleEndian) PutUint16(b []byte, v uint16) /*{
	b[0] = byte(v)
	b[1] = byte(v >> 8)
}*/

requires acc(&b[0], _) && acc(&b[1], _) && acc(&b[2], _) && acc(&b[3], _)
pure func (e LittleEndian) Uint32(b []byte) uint32 /*{
	return uint32(b[0]) | uint32(b[1])<<8 | uint32(b[2])<<16 | uint32(b[3])<<24
}*/

requires acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
ensures acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
func (e LittleEndian) PutUint32(b []byte, v uint32) /* {
	b[0] = byte(v)
	b[1] = byte(v >> 8)
	b[2] = byte(v >> 16)
	b[3] = byte(v >> 24)
}*/

requires acc(&b[0], _) && acc(&b[1], _) && acc(&b[2], _) && acc(&b[3], _)
requires acc(&b[4], _) && acc(&b[5], _) && acc(&b[6], _) && acc(&b[7], _)
pure func (e LittleEndian) Uint64(b []byte) uint64 /*{
	return uint64(b[0]) | uint64(b[1])<<8 | uint64(b[2])<<16 | uint64(b[3])<<24 |
		uint64(b[4])<<32 | uint64(b[5])<<40 | uint64(b[6])<<48 | uint64(b[7])<<56
}*/

requires acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
requires acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
ensures acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
ensures acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
func (e LittleEndian) PutUint64(b []byte, v uint64) /*{
	b[0] = byte(v)
	b[1] = byte(v >> 8)
	b[2] = byte(v >> 16)
	b[3] = byte(v >> 24)
	b[4] = byte(v >> 32)
	b[5] = byte(v >> 40)
	b[6] = byte(v >> 48)
	b[7] = byte(v >> 56)
}*/

ensures res == "LittleEndian"
func (l LittleEndian) String() (res string) { return "LittleEndian" }

ensures res == "binary.LittleEndian"
func (l LittleEndian) GoString() (res string) { return "binary.LittleEndian" }

requires acc(&b[0], _) && acc(&b[1], _)
pure func (e BigEndian) Uint16(b []byte) uint16 /*{
	return uint16(b[1]) | uint16(b[0])<<8
}*/

requires acc(&b[0]) && acc(&b[1])
ensures acc(&b[0]) && acc(&b[1])
func (e BigEndian) PutUint16(b []byte, v uint16) /*{
	b[0] = byte(v >> 8)
	b[1] = byte(v)
}*/

requires acc(&b[0], _) && acc(&b[1], _) && acc(&b[2], _) && acc(&b[3], _)
pure func (e BigEndian) Uint32(b []byte) uint32 /*{
	return uint32(b[3]) | uint32(b[2])<<8 | uint32(b[1])<<16 | uint32(b[0])<<24
}*/


requires acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
ensures acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
func (e BigEndian) PutUint32(b []byte, v uint32) /*{
	b[0] = byte(v >> 24)
	b[1] = byte(v >> 16)
	b[2] = byte(v >> 8)
	b[3] = byte(v)
}*/

requires acc(&b[0], _) && acc(&b[1], _) && acc(&b[2], _) && acc(&b[3], _)
requires acc(&b[4], _) && acc(&b[5], _) && acc(&b[6], _) && acc(&b[7], _)
pure func (e BigEndian) Uint64(b []byte) uint64 /*{
	return uint64(b[7]) | uint64(b[6])<<8 | uint64(b[5])<<16 | uint64(b[4])<<24 |
		uint64(b[3])<<32 | uint64(b[2])<<40 | uint64(b[1])<<48 | uint64(b[0])<<56
}*/

requires acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
requires acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
ensures acc(&b[0]) && acc(&b[1]) && acc(&b[2]) && acc(&b[3])
ensures acc(&b[4]) && acc(&b[5]) && acc(&b[6]) && acc(&b[7])
func (e BigEndian) PutUint64(b []byte, v uint64) /*{
	b[0] = byte(v >> 56)
	b[1] = byte(v >> 48)
	b[2] = byte(v >> 40)
	b[3] = byte(v >> 32)
	b[4] = byte(v >> 24)
	b[5] = byte(v >> 16)
	b[6] = byte(v >> 8)
	b[7] = byte(v)
}*/


ensures res == "BigEndian"
func (b BigEndian) String() (res string) { return "BigEndian" }

ensures res == "binary.BigEndian"
func (b BigEndian) GoString() (res string) { return "binary.BigEndian" }

// Read reads structured binary data from r into data.
// TODO: add support for io.Reader
// func Read(r io.Reader, order ByteOrder, data interface{}) error

// Write writes the binary representation of data into w.
// TODO: add support for io.Write
// func Write(w io.Writer, order ByteOrder, data interface{}) error

// Size returns how many bytes Write would generate to encode the value v, which
// must be a fixed-size value or a slice of fixed-size values, or a pointer to such data.
// If v is neither of these, Size returns -1.
// (joao) requires support for the reflect package
func Size(v interface{}) int /*{
	return dataSize(reflect.Indirect(reflect.ValueOf(v)))
}*/