// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in https://golang.org/LICENSE

// Signatures for the public declarations in file
// https://github.com/golang/go/blob/master/src/net/ip.go

package net

// IP address lengths (bytes).
const (
	IPv4len = 4
	IPv6len = 16
)

type IP []byte

type IPMask []byte

type IPNet struct {
	// IP   IP // TODO: leads to a kiama cycle
	Mask IPMask
}

// IPv4 returns the IP address (in 16-byte form) of the
// IPv4 address a.b.c.d.
func IPv4(a, b, c, d byte) IP

// IPv4Mask returns the IP mask (in 4-byte form) of the
// IPv4 mask a.b.c.d.
func IPv4Mask(a, b, c, d byte) IPMask 

// CIDRMask returns an IPMask consisting of 'ones' 1 bits
// followed by 0s up to a total length of 'bits' bits.
func CIDRMask(ones, bits int) IPMask 

// Well-known IPv4 addresses
// TODO: add support for global vars
/*
var (
	IPv4bcast     = IPv4(255, 255, 255, 255) // limited broadcast
	IPv4allsys    = IPv4(224, 0, 0, 1)       // all systems
	IPv4allrouter = IPv4(224, 0, 0, 2)       // all routers
	IPv4zero      = IPv4(0, 0, 0, 0)         // all zeros
)
*/

// Well-known IPv6 addresses
// TODO: add support for global vars
/*
var (
	IPv6zero                   = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	IPv6unspecified            = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	IPv6loopback               = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	IPv6interfacelocalallnodes = IP{255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	IPv6linklocalallnodes      = IP{255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
	IPv6linklocalallrouters    = IP{255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}
)
*/

// IsUnspecified reports whether ip is an unspecified address, either
// the IPv4 address "0.0.0.0" or the IPv6 address "::".
func (ip IP) IsUnspecified() bool /*{
	return ip.Equal(IPv4zero) || ip.Equal(IPv6unspecified)
}*/

// IsLoopback reports whether ip is a loopback address.
func (ip IP) IsLoopback() bool /*{
	if ip4 := ip.To4(); ip4 != nil {
		return ip4[0] == 127 // TODO: currently, this leads to a type error
	}
	return ip.Equal(IPv6loopback)
}*/

// IsMulticast reports whether ip is a multicast address.
func (ip IP) IsMulticast() bool

// IsInterfaceLocalMulticast reports whether ip is an interface-local multicast address.
func (ip IP) IsInterfaceLocalMulticast() bool

// IsLinkLocalMulticast reports whether ip is a link-local multicast address.
func (ip IP) IsLinkLocalMulticast() bool 

// IsLinkLocalUnicast reports whether ip is a link-local unicast address.
func (ip IP) IsLinkLocalUnicast() bool 

// IsGlobalUnicast reports whether ip is a global unicast
// address.
func (ip IP) IsGlobalUnicast() bool /*{
	return (len(ip) == IPv4len || len(ip) == IPv6len) &&
		!ip.Equal(IPv4bcast) &&
		!ip.IsUnspecified() &&
		!ip.IsLoopback() &&
		!ip.IsMulticast() &&
		!ip.IsLinkLocalUnicast()
}*/

// To4 converts the IPv4 address ip to a 4-byte representation.
func (ip IP) To4() IP /*{
	if len(ip) == IPv4len { // (joao): type error, check issue #228
		return ip
	}
	if len(ip) == IPv6len &&
		isZeros(ip[0:10]) &&
		ip[10] == 255 &&
		ip[11] == 255 {
		return ip[12:16]
	}
	return nil
}*/

// To16 converts the IP address ip to a 16-byte representation.
func (ip IP) To16() IP /*{
	if len(ip) == IPv4len { // (joao): type error, check issue #228
		return IPv4(ip[0], ip[1], ip[2], ip[3])
	}
	if len(ip) == IPv6len {
		return ip
	}
	return nil
}*/

// DefaultMask returns the default IP mask for the IP address ip.
func (ip IP) DefaultMask() IPMask

// Mask returns the result of masking the IP address ip with mask.
func (ip IP) Mask(mask IPMask) IP

func (ip IP) String() string

// MarshalText implements the encoding.TextMarshaler interface.
ensures forall i int :: 0 <= i && i < len(res) ==> acc(&res[i])
func (ip IP) MarshalText() (res []byte, error) /*{
	if len(ip) == 0 {
		return []byte(""), nil
	}
	if len(ip) != IPv4len && len(ip) != IPv6len {
		return nil, &AddrError{Err: "invalid IP address", Addr: hexString(ip)}
	}
	return []byte(ip.String()), nil
}*/

// UnmarshalText implements the encoding.TextUnmarshaler interface.
// The IP address is expected in a form accepted by ParseIP.
requires acc(ip)
requires p > 0
requires forall i int :: 0 <= i && i < len(text) ==> acc(&text[i], p)
ensures acc(ip)
ensures forall i int :: 0 <= i && i < len(text) ==> acc(&text[i], p)
func (ip *IP) UnmarshalText(text []byte, ghost p perm) error 

// Equal reports whether ip and x are the same IP address.
// An IPv4 address and that same address in IPv6 form are
// considered to be equal.
pure func (ip IP) Equal(x IP) bool /*{
	if len(ip) == len(x) { // (joao): type error, check issue #228
		return bytealg.Equal(ip, x)
	}
	if len(ip) == IPv4len && len(x) == IPv6len {
		return bytealg.Equal(x[0:12], v4InV6Prefix) && bytealg.Equal(ip, x[12:])
	}
	if len(ip) == IPv6len && len(x) == IPv4len {
		return bytealg.Equal(ip[0:12], v4InV6Prefix) && bytealg.Equal(ip[12:], x)
	}
	return false
}*/

// Size returns the number of leading ones and total bits in the mask.
func (m IPMask) Size() (ones, bits int)

// String returns the hexadecimal form of m, with no punctuation.
func (m IPMask) String() string 

// Contains reports whether the network includes ip.
requires p > 0
requires acc(n, p)
ensures p > 0
func (n *IPNet) Contains(ip IP, ghost p perm) bool

// Network returns the address's network name, "ip+net".
func (n *IPNet) Network() string { return "ip+net" }

// String returns the CIDR notation of n like "192.0.2.0/24"
// or "2001:db8::/48" as defined in RFC 4632 and RFC 4291.
requires p > 0
requires acc(n, p)
ensures acc(n, p)
func (n *IPNet) String(ghost p perm) string

// ParseIP parses s as an IP address, returning the result.
func ParseIP(s string) IP

// ParseCIDR parses s as a CIDR notation IP address and prefix length,
// like "192.0.2.0/24" or "2001:db8::/32", as defined in
// RFC 4632 and RFC 4291.
ensures ipnet != nil ==> acc(ipnet)
func ParseCIDR(s string) (IP, ipnet *IPNet, error)