ghost
decreases n
func factorial(n int) int {
    if n == 0 {
        return 1
    } else {
        return factorial(n-1)
    }
}

ghost
requires m >= 0
requires n >= 0
ensures result >= 0
decreases m, n
func ack(m int, n int) (result int) {

   if(m == 0) {
   
    return n+1
    
   } else {

     if (n==0) {
     
     ack(m-1 , 1)
     
    } else {
    
    ack(m-1 , ack(m, n - 1))
}

}

}



ghost
func facade(i int) int{
 return compute(i, 0)
}

decreases
func compute(i int, j int) int {
 return i + j
}


ghost
requires 1 <= n
decreases _
func collatz(n int) int {
  
  if (n == 1) {
  return n
} else {

  if (n % 2 == 0) {
     return collatz(n / 2)
} else {
   return collatz(3 * n + 1)
}

}

}

ghost
decreases *
func nonterm() int {
 return 1 + nonterm()
}


ghost
requires x >= 0
decreases x
func is_even(x int) bool{
   if( x==0 ) {
   return true
} else {
   return is_odd(x-1)
}
}


ghost
requires y >= 0
decreases y
func is_odd(y int) bool {
    if ( y==0 ) {
    return false
} else {
    return is_even(y-1)
}
}


ghost
decreases x if 1 <= x
decreases _ if x <= -1
decreases *
func sign(x int) int {

    if( x==0 ){
    return sign(x)
} else{

    if( 1<x) {
    
    return sign(x - 1)
}  else {
    
    if( x < -1 ) {
    return sign(x + 1)
    
}  else {
    return x
     }
}
}
}

ghost
decreases
func caller(x int) int{
 return sign(x)
}

ghost
requires 0 <= n
ensures res == n * (n + 1) / 2
decreases
func sum(n int) (res int) {
  res := 0
  invariant i <= (n + 1)
   invariant res == (i - 1) * i / 2
   decreases n-i
  for i:=0; i<=n; i++{
    res = res + i
  }
  return res
}

